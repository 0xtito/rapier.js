### v0.2.0
- Calling `.free()` is now required only for objects that live for the whole duration of the simulation. This means that
  it is no longer necessary to `.free()` vectors, rays, ray intersections, colliders, rigid-bodies, etc. Object that
  continue to require an explicit `.free()` are:
  - `World` and `EventQueue`.
  - Or, if you are not using the `World` directly:
    `RigidBodySet`, `ColliderSet`, `JointSet`, `IntegrationParameters`, `PhysicsPipeline`, `QueryPipeline`, `SerializationPipeline`, and `EventQueue`.
- Collider.parent() now returns the handle of its parent.
- Colliders are now built with `world.createCollider`. `body.createCollider(colliderDesc)` becomes `world.createCollider(colliderDesc, bodyHandle)`.
- Shape types are not an enumeration instead of strings: `ShapeType.Ball` and `ShapeType.Cuboid` instead of `"ball"` and `"cuboid"`.
- `collider.handle` is now a field instead of a function.
- `body.handle` is now a field instead of a function.
- The world's gravity is now a `Vector` instead of individual components.
- `world.stepWithEvents` becomes `world.step`.
- `RigidBodyDesc` and `ColliderDesc` now use the builder pattern. For example
  `let bodyDesc = new RAPIER.RigidBodyDesc("dynamic"); bodyDesc.setTranslation(x, y, z)` becomes
  `new RigidBodyDesc(BodyStatus.Dynamic).setTranslation(new Vector(x, y, z))`.
- 2D rotations are now just a `number` instead of a `Rotation` struct. So instead of doing `rotation.angle`, single use
  the number as the rotation angle.
- 3D rotations are now represented by the interface `Rotation` (with fields `{x,y,z,w}` or the class `Quaternion`.
- 2D vectors are now represented by the interface `Vector` (with fields `{x,y}` or the class `Vector2`).
- 3D vectors are now represented by the interface `Vector` (with fields `{x,y,z}` or the class `Vector3`).

### v0.1.15
- Fix crash when removing a kinematic rigid-body from the World.

### v0.1.14
- Fix issues where force application functions took ownership of the JS vector, preventing the user from
  freeing with `Vector.free()` afterwards.

### v0.1.13
- Added `rigidBody.setNextKinematicTranslation` to set the translation of a kinematic rigid-body at the next timestep.
- Added `rigidBody.setNextKinematicRotation` to set the rotation of a kinematic rigid-body at the next timestep.
- Added `rigidBody.predictedTranslation` to get the translation of a kinematic rigid-body at the next timestep.
- Added `rigidBody.predictedRotation` to set the rotation of a kinematic rigid-body at the next timestep.
- Added `Ray` and `RayIntersection` structures for ray-casting.
- Added `world.castRay` to compute the first hit of a ray with the physics scene.
- Fix a bug causing a kinematic rigid-body not to teleport as expected after a `rigidBody.setPosition`.

### v0.1.12
- Added `world.removeCollider(collider)` to remove a collider from the physics world.
- Added `colliderDesc.setTranslation(...)` to set the relative translation of the collider to build wrt.
  the rigid-body it is attached to.
- Added `colliderDesc.setRotation(...)` to set the relative rotation of the collider to build wrt.
  the rigid-body it is attached to.

### v0.1.11
- Fix a bug causing a crash when the broad-phase proxy handles were recycled.

### v0.1.10
- Fix a determinism problem that could cause rigid-body handle allocation to be non-deterministic after a snapshot
  restoration.

### v0.1.9
- Added `world.getCollider(handle)` that retrieves a collider from its integer handle.
- Added `joint.handle()` that returns the integer handle of the joint.


### v0.1.8
- Added `world.forEachRigidBodyHandle(f)` to apply a closure on the integer handle
  of each rigid-body on the world.
- Added `world.forEachActiveRigidBody(f)` to apply a closure on each rigid-body
  on the world.
- Added `world.forEachActiveRigidBodyHandle(f)` to apply a closure on the integer
  handle of each rigid-body on the world.
- Added `rigidBody.applyForce`, `.applyTorque`, `.applyImpulse`, `.applyTorqueImpulse`, `.applyForceAtPoint`, and
  `.applyImpulseAtPoint` to apply a manual force or torque to a rigid-body.
- Added the `EventQueue` structure that can be used to collect and iterate through physics events.
- Added the `Proximity` enum that represents the proximity state of a sensor collider and another collider.
- Added the `world.stepWithEvents(eventQueue)` which executes a physics timestep and collects the physics events
  into the given event queue.

### v0.1.7
- Added `world.getRigidBody(handle)` to retrieve a rigid-body from its handle.
- Added `world.getJoint(handle)` to retrieve a joint from its handle.
- Added `rigidBody.rotation()` to retrieve its world-space orientation as a quaternion.
- Added `rigidBody.setTranslation(...)` to set the translation of a rigid-body.
- Added `rigidBody.setRotation(...)` to set the orientation of a rigid-body.
- Added `rigidBody.wakeUp()` to manually wake up a rigid-body.
- Added `rigidBody_desc.setRotation(...)` to set tho orientation of the rigid-body to be created.

### v0.1.6
- Added `world.removeRigidBody(...)` to remove a rigid-body from the world.